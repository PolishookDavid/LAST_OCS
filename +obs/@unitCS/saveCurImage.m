function saveCurImage(UnitObj,itel)
    % Save last image to disk according the user's settings
    % Also set LastImageSaved to true, until a new image is taken
    % Intended only for local cameras in the UnitObj

    CameraObj=UnitObj.Camera{itel};
    
    if isa(CameraObj,'obs.remoteClass')
        SizeImIJ = CameraObj.Messenger.query(...
            sprintf('size(%s.LastImage)',CameraObj.RemoteName));
    else
        SizeImIJ = size(CameraObj.LastImage);
    end

    if prod(SizeImIJ)==0
        UnitObj.reportError(sprintf('no image taken by telescope %d to be saved',...
                            itel))
        return
    end
    % Construct directory name to save image in
    ProjName = sprintf('%s.%d.%02d.%d',...
                       UnitObj.Config.ProjName,...
                       UnitObj.Config.NodeNumber, 1, itel);
    JD = CameraObj.classCommand('TimeStartLastImage') + 1721058.5;

    % default values for fields which may be a bit too fragile to store
    %  only in config files: Filter, DataDir, BaseDir

    [FileName,Path]=imUtil.util.file.construct_filename('ProjName',ProjName,...
        'Date',JD,...
        'Filter',CameraObj.classCommand('Config.Filter'),...
        'FieldID',CameraObj.classCommand('Object'),...
        'Type',CameraObj.classCommand('ImType'),...
        'Level','raw',...
        'SubLevel','',...
        'Product','im',...
        'Version',1,...
        'FileType','fits',...
        'DataDir',CameraObj.classCommand('Config.DataDir'),...
        'Base',CameraObj.classCommand('Config.BaseDir'));
    
    CameraObj.classCommand(['LastImageName = ''' FileName ''';']);

    % create the header locally, even from remote objects, because
    %  round-trip queries fail
    HeaderCell=constructHeader(UnitObj,itel);
    UnitObj.report(sprintf('Writing image %s to disk\n',...
                           CameraObj.classCommand('LastImageName')));

    % Write fits, in the session where the camera object lives
    if isa(CameraObj,'obs.remoteClass')
        CameraObj.Messenger.query(['PWD = pwd; tools.os.cdmkdir(''' Path ''');'])
        % tour de force to transmit the header
        CameraObj.Messenger.query([ 'HeaderCell=reshape(jsondecode(''',...
                                    jsonencode(HeaderCell,'ConvertInfAndNaN',false),...
                                    '''),[],3);' ]);
        CameraObj.Messenger.query([ 'FITS.write(single(CameraObj.LastImage),',...
                                    'CameraObj.LastImageName,',...
                                    '''Header'',HeaderCell,',...
                                    '''DataType'',''single'',',...
                                    '''Overwrite'',true);' ]);                    
        CameraObj.Messenger.query('cd(PWD); clear PWD HeaderCell');
    else
        PWD = pwd;
        tools.os.cdmkdir(Path);  % cd and on the fly mkdir
        FITS.write(single(CameraObj.LastImage), CameraObj.LastImageName,...
                   'Header',HeaderCell,'DataType','single','Overwrite',true);
        cd(PWD);
    end

    % CameraObj.classCommand(['LogFile.writeLog(' ...
    %    sprintf('Image: %s is written', CameraObj.classCommand('LastImageName') ')'])


    CameraObj.classCommand('LastImageSaved = true;');

end